load("@io_bazel_rules_docker//container:container.bzl", "container_image", "container_push")
load("//k8s/apps/jenkins/build:build.bzl", "jenkins_plugin_files_all")

# The Jenkins controller image is based on an upstream controller OCI image
# from Dockerhub. We only overlay plugins into it, and those are automatically
# copied to the controller's home directory by the base image's entrypoint
# machinery.
# The plugins list is defined by build.bzl/workspace.bzl, which in turn are
# generated by //k8s/apps/jenkins/build/plugingen. See its README/source for
# more information about how to change the list of plugins and regenerate the
# .bzl files.
container_image(
    name = "controller_image",
    base = "@jenkins_controller_base//image",
    directory = "/usr/share/jenkins/ref/plugins",
    files = jenkins_plugin_files_all(),
    mode = "0o644",
)

container_push(
    name = "controller_push",
    format = "Docker",
    image = "controller_image",
    registry = "gcr.io",
    repository = "monogon-infra/jenkins-controller",
    tag = "2.337-centos7-1",
)

# The Jenkins agent image is based on the Monogon monorepo's build container.
#
# The build container has everything needed to run Bazel against a copy of the
# Monogon monorepo, and we only overlay a small tool (agentlauncher) to
# automatically download and start the Jenkins agent from a JAR URL.
#
# The build process for the base image is currently in a transition period as
# the infra repository and the monorepo are merged. Currently, the monorepo
# build container is built and pushed fully manually to gcr.io (see WORKSPACE).
container_image(
    name = "agent_image",
    base = "@monogon_builder//image",
    directory = "/monogon-infra/k8s/apps/jenkins/build",
    files = [
        "//k8s/apps/jenkins/build/agentlauncher",
    ],
)

container_push(
    name = "agent_push",
    format = "Docker",
    image = "agent_image",
    registry = "gcr.io",
    repository = "monogon-infra/jenkins-agent",
    tag = "monogon-builder-1646697051",
)
